/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/user": {
    /**
     * Show Profile
     * @description Displays the logged in users profile information.
     */
    get: {
      responses: {
        /** @description Successful response */
        201: {
          content: {
            "application/json": components["schemas"]["todo"];
          };
        };
      };
    };
  };
  "/todo": {
    /**
     * Index
     * @description Displays all the todos related to the logged in user.
     */
    get: {
      responses: {
        /** @description Successful response */
        201: {
          content: {
            "application/json": components["schemas"]["todo"];
          };
        };
      };
    };
    /**
     * Store
     * @description Creates a new todo related to the logged in user.
     */
    post: {
      /** @description Todo data */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["todo"];
        };
      };
      responses: {
        /** @description Successful response */
        201: {
          content: {
            "application/json": components["schemas"]["todo"];
          };
        };
        /** @description Validation errors */
        422: {
          content: {
            "application/json": {
              /** @example The given data was invalid. */
              message?: string;
              /**
               * @example {
               *   "field": [
               *     "Something is wrong with this field!"
               *   ]
               * }
               */
              errors?: {
                [key: string]: string[];
              };
            };
          };
        };
      };
    };
  };
  "/todo/{todo}": {
    /**
     * Show
     * @description Returns a single todo from its id.
     * The todo must be related to the logged in user.
     */
    get: {
      parameters: {
        path: {
          todo: string;
        };
      };
    };
  };
  "/auth/login": {
    /**
     * Login
     * @description Handle an incoming authentication request.
     */
    post: {
      /** @description Authentication request */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Authenticate"];
        };
      };
      responses: {
        /** @description Successful response */
        204: {
          content: never;
        };
        /** @description Validation errors */
        422: {
          content: {
            "application/json": {
              /** @example The given data was invalid. */
              message?: string;
              /**
               * @example {
               *   "field": [
               *     "Something is wrong with this field!"
               *   ]
               * }
               */
              errors?: {
                [key: string]: string[];
              };
            };
          };
        };
      };
    };
  };
  "/auth/logout": {
    /**
     * Logout
     * @description Destroy an authenticated session.
     */
    post: {
      /** @description Authentication request */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Authenticate"];
        };
      };
      responses: {
        /** @description Successful response */
        204: {
          content: never;
        };
        /** @description Not logged in */
        401: {
          content: {
            "application/json": {
              /** @example Unauthenticated. */
              message?: string;
            };
          };
        };
        /** @description Validation errors */
        422: {
          content: {
            "application/json": {
              /** @example The given data was invalid. */
              message?: string;
              /**
               * @example {
               *   "field": [
               *     "Something is wrong with this field!"
               *   ]
               * }
               */
              errors?: {
                [key: string]: string[];
              };
            };
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Authenticate: {
      /** @example test@test.test */
      email?: string;
      /**
       * Format: password
       * @example password
       */
      password?: string;
    };
    todo: {
      /** Format: uuid */
      id: string;
      /** @example Write more todos */
      task?: string;
      /** @default false */
      completed?: boolean;
      /** Format: uuid */
      user_id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
